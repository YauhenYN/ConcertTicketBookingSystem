using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ConcertTicketBookingSystemAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace ConcertTicketBookingSystemAPI.Dtos.ConcertsDtos
{
    public static class ExtensionMethods
    {
        public static ConcertDto ToDto(this ClassicConcert concert) => new ConcertDto() { ClassicConcertInfo = new ClassicConcertDto() { Compositor = concert.Compositor, ConcertName = concert.ConcertName, VoiceType = concert.VoiceType }, ConcertId = concert.ConcertId, ConcertType = "ClassicConcert", Cost = concert.Cost, CreationTime = concert.CreationTime, EventTime = concert.ConcertDate, IsActive = concert.IsActiveFlag, Latitude = concert.Latitude, Longitude = concert.Longitude, LeftTicketsCount = concert.LeftCount, Performer = concert.Performer, TotalTicketsCount = concert.TotalCount, ImageIds = concert.Images.Select(i => i.ImageId).ToArray(), PreImageType = concert.PreImageType, PreImage = concert.PreImage };
        public static ConcertDto ToDto(this OpenAirConcert concert) => new ConcertDto() { OpenAirConcertInfo = new OpenAirConcertDto() { HeadLiner = concert.HeadLiner, Route = concert.Route }, ConcertId = concert.ConcertId, ConcertType = "OpenAirConcert", Cost = concert.Cost, CreationTime = concert.CreationTime, EventTime = concert.ConcertDate, IsActive = concert.IsActiveFlag, Latitude = concert.Latitude, Longitude = concert.Longitude, LeftTicketsCount = concert.LeftCount, Performer = concert.Performer, TotalTicketsCount = concert.TotalCount, ImageIds = concert.Images.Select(i => i.ImageId).ToArray(), PreImageType = concert.PreImageType, PreImage = concert.PreImage };
        public static ConcertDto ToDto(this PartyConcert concert) => new ConcertDto() { PartyConcertInfo = new PartyConcertDto() { Censure = concert.Censure }, ConcertId = concert.ConcertId, ConcertType = "PartyConcert", Cost = concert.Cost, CreationTime = concert.CreationTime, EventTime = concert.ConcertDate, IsActive = concert.IsActiveFlag, Latitude = concert.Latitude, Longitude = concert.Longitude, LeftTicketsCount = concert.LeftCount, Performer = concert.Performer, TotalTicketsCount = concert.TotalCount, ImageIds = concert.Images.Select(i => i.ImageId).ToArray(), PreImageType = concert.PreImageType, PreImage = concert.PreImage };
        public static async Task<LightConcertDto[]> ToDtosAsync(this IQueryable<Concert> concerts, ConcertType concertType) => await concerts.Select(c => new LightConcertDto() { ConcertId = c.ConcertId, ConcertType = concertType.ToString(), Cost = c.Cost, EventTime = c.ConcertDate, IsActive = c.IsActiveFlag, LeftTicketsCount = c.LeftCount, Performer = c.Performer, PreImage = c.PreImage, PreImageType = c.PreImageType}).ToArrayAsync();
        public static ClassicConcert ToClassicConcert(this AddConcertDto dto) => new ClassicConcert() { Compositor = dto.ClassicConcertInfo.Compositor, ConcertDate = dto.EventTime, ConcertName = dto.ClassicConcertInfo.ConcertName, Cost = dto.Cost, IsActiveFlag = dto.IsActive, Latitude = dto.Latitude, LeftCount = dto.TotalTicketsCount, Longitude = dto.Longitude, Performer = dto.Performer, PreImage = dto.PreImage, PreImageType = dto.PreImageType, TotalCount = dto.TotalTicketsCount, UserId = mnm, n, n,, VoiceType = dto.ClassicConcertInfo.VoiceType };
        public static OpenAirConcert ToOpenAirConcert(this AddConcertDto dto) => new OpenAirConcert() { ConcertDate = dto.EventTime, Cost = dto.Cost, IsActiveFlag = dto.IsActive, Latitude = dto.Latitude, LeftCount = dto.TotalTicketsCount, Longitude = dto.Longitude, Performer = dto.Performer, PreImage = dto.PreImage, PreImageType = dto.PreImageType, TotalCount = dto.TotalTicketsCount, UserId = mnm, n, n,, HeadLiner = dto.OpenAirConcertInfo.HeadLiner, Route = dto.OpenAirConcertInfo.Route};
        public static PartyConcert ToPartyConcert(this AddConcertDto dto) => new PartyConcert() { ConcertDate = dto.EventTime, Cost = dto.Cost, IsActiveFlag = dto.IsActive, Latitude = dto.Latitude, LeftCount = dto.TotalTicketsCount, Longitude = dto.Longitude, Performer = dto.Performer, PreImage = dto.PreImage, PreImageType = dto.PreImageType, TotalCount = dto.TotalTicketsCount, UserId = mnm, n, n,, Censure = dto.PartyConcertInfo.Censure};
    }
}
